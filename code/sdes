# S-DES 置换表和 S-Box
P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]  # P10 置换表
P8 = [6, 3, 7, 4, 8, 5, 10, 9]  # P8 置换表
IP = [2, 6, 3, 1, 4, 8, 5, 7]  # 初始置换 IP
IP_inv = [4, 1, 3, 5, 7, 2, 8, 6]  # 逆初始置换 IP^-1
EP = [4, 1, 2, 3, 2, 3, 4, 1]  # 扩展置换 EP
P4 = [2, 4, 3, 1]  # P4 置换表

SBox1 = [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 0, 2]]  # SBox1
SBox2 = [[0, 1, 2, 3], [2, 3, 1, 0], [3, 0, 1, 2], [2, 1, 0, 3]]  # SBox2


    # 置换函数
def permute(input_bits, permutation_table):
    return [input_bits[i - 1] for i in permutation_table]

# 左移函数
def left_shift(bits, num_shifts):
    return bits[num_shifts:] + bits[:num_shifts]

# 异或操作
def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

# 密钥扩展函数，生成两个子密钥 k1 和 k2
def key_expansion(key):
    # P10 置换
    permuted_key = permute(key, P10)

    left, right = permuted_key[:5], permuted_key[5:]

    # 第一次左移
    left1 = left_shift(left, 1)
    right1 = left_shift(right, 1)
    k1 = permute(left1 + right1, P8)  # P8 置换生成 K1

    # 第二次左移
    left2 = left_shift(left1, 2)
    right2 = left_shift(right1, 2)
    k2 = permute(left2 + right2, P8)  # P8 置换生成 K2

    return k1, k2

# 轮函数 f_k
def f(R, k):
    # EP 置换
    permuted_R = permute(R, EP)

    # 与子密钥 k 进行异或
    xor_result = xor(permuted_R, k)

    # S-Box 输入
    left_sbox_input = xor_result[:4]
    right_sbox_input = xor_result[4:]

    # S-Box 替换
    row1 = (left_sbox_input[0] << 1) | left_sbox_input[3]  
    col1 = (left_sbox_input[1] << 1) | left_sbox_input[2]  
    sbox1_output = SBox1[row1][col1]

    row2 = (right_sbox_input[0] << 1) | right_sbox_input[3]  
    col2 = (right_sbox_input[1] << 1) | right_sbox_input[2]  
    sbox2_output = SBox2[row2][col2]

    # S-Box 输出转换为二进制
    sbox_output = [int(x) for x in f'{sbox1_output:02b}'] + [int(x) for x in f'{sbox2_output:02b}']

    # P4 置换
    return permute(sbox_output, P4)

# S-DES 加密函数
def encrypt(plaintext, key):

    k1, k2 = key_expansion(key)

    # 初始置换 IP
    IP_plaintext = permute(plaintext, IP)


    L0, R0 = IP_plaintext[:4], IP_plaintext[4:]

    # 第一轮 F 函数
    L1 = R0
    r0 = f(R0, k1)  
    R1 = xor(L0, r0) 

    # 交换左右
    L2 = R1
    r1 = f(L1, k2)  # 调用 f 函数，L1 参与
    R2 = xor(L2, r1)  


    combined = R2 + L1  

    # 逆初始置换 IP_inv

    ciphertext = permute(combined, IP_inv)

    return ciphertext


def decrypt(ciphertext, key):

    k1, k2 = key_expansion(key)

    # 初始置换 IP
    IP_ciphertext = permute(ciphertext, IP)


    L0, R0 = IP_ciphertext[:4], IP_ciphertext[4:]


    L1 = R0
    r0 = f(R0, k2)  # 调用 f 函数
    R1 = xor(L0, r0)  # L0 与 f(R0, k2) 异或得到 R1

    # 交换左右
    L2 = R1
    r1 = f(L1, k1)  
    R2 = xor(L2, r1)  


    combined = R2 + L1 

    # 逆初始置换 IP_inv
    plaintext = permute(combined, IP_inv)

    return plaintext

    

# 将字符转换为二进制数组 (8 位)
def char_to_bits(char):
    return [int(bit) for bit in f'{ord(char):08b}']

# 将二进制数组转换回字符
def bits_to_char(bits):
    if len(bits) != 8:
        raise ValueError("bits 参数长度必须为8")  # 确保长度为8
    return chr(int(''.join(map(str, bits)), 2))  # 将 bits 转换为字符串并以二进制形式转为整数


# 将字符串转换为二进制数组
def string_to_bits(string):
    return [char_to_bits(char) for char in string]

# 将二进制数组转换回字符串
def bits_to_string(bits_list):
    return ''.join(bits_to_char(bits) for bits in bits_list)

# 加密字符串
def encrypt_string(plaintext_str, key):
    plaintext_bits = string_to_bits(plaintext_str)  
    ciphertext_bits_list = [encrypt(bits, key) for bits in plaintext_bits]  
    return bits_to_string(ciphertext_bits_list)  

# 解密字符串
def decrypt_string(ciphertext_str, key):
    ciphertext_bits = string_to_bits(ciphertext_str)  
    decrypted_bits_list = [decrypt(bits, key) for bits in ciphertext_bits]  
    return bits_to_string(decrypted_bits_list)  

